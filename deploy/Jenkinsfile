pipeline {
  agent any

  parameters {
    booleanParam(name : 'BUILD_DOCKER_IMAGE', defaultValue : true, description : 'BUILD_DOCKER_IMAGE')
    booleanParam(name : 'RUN_TEST', defaultValue : true, description : 'RUN_TEST')
    booleanParam(name : 'PUSH_DOCKER_IMAGE', defaultValue : true, description : 'PUSH_DOCKER_IMAGE')
//    booleanParam(name : 'PROMPT_FOR_DEPLOY', defaultValue : false, description : 'PROMPT_FOR_DEPLOY')
    booleanParam(name : 'DEPLOY_WORKLOAD', defaultValue : true, description : 'DEPLOY_WORKLOAD')

    // CI
    string(name : 'AWS_ACCOUNT_ID', defaultValue : '802844773267', description : 'AWS_ACCOUNT_ID')
    string(name : 'DOCKER_IMAGE_NAME', defaultValue : 'demo-jh', description : 'DOCKER_IMAGE_NAME')
    string(name : 'DOCKER_TAG', defaultValue : '1.0.0', description : 'DOCKER_TAG')

    // CD
//    string(name : 'TARGET_SVR_USER', defaultValue : 'ec2-user', description : 'TARGET_SVR_USER')
//    string(name : 'TARGET_SVR_PATH', defaultValue : '/home/ec2-user/', description : 'TARGET_SVR_PATH')
//    string(name : 'TARGET_SVR', defaultValue : '10.0.3.61', description : 'TARGET_SVR')
  }

  environment {
    REGION = "ap-northeast-2"
    ECR_REPOSITORY = "${params.AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    DOCKER_IMAGE = "${ECR_REPOSITORY}/${params.DOCKER_IMAGE_NAME}:${params.DOCKER_TAG}"
//    ECR_DOCKER_TAG = "${params.DOCKER_TAG}"
  }

  stages {
    stage('============ Build Docker Image ============') {
        when { expression { return params.BUILD_DOCKER_IMAGE } }
        steps {
            dir("${env.WORKSPACE}") {
                sh 'docker build -t ${DOCKER_IMAGE} .'
            }
        }
        post {
            always {
                echo "Docker build success!"
            }
        }
    }
    stage('============ Run test code ============') {
        when { expression { return params.RUN_TEST } }
        steps {
            sh('docker run --rm ${DOCKER_IMAGE} /root/.local/bin/pytest -v')
        }
    }
    stage('============ Push Docker Image ============') {
        when { expression { return params.PUSH_DOCKER_IMAGE } }
        steps {
            echo "Push Docker Image to ECR"
            sh '''
                aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}
                docker push ${DOCKER_IMAGE}
            '''
        }
    }
    stage('============ Deploy Workload ============') {
        when { expression { return params.DEPLOY_WORKLOAD } }
        steps {
            echo "Deploy Workload"
        }
    }
  }
  post {
    cleanup {
        sh('docker image prune -f')
        sh('docker container prune -f')
    }
  }
}
